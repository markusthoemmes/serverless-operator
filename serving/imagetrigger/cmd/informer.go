package main

import (
	ourv1 "github.com/openshift-knative/serverless-operator/pkg/client/informers/externalversions/image/v1"
	ourv1lister "github.com/openshift-knative/serverless-operator/pkg/client/listers/image/v1"
	v1 "github.com/openshift/api/image/v1"
	theirv1lister "github.com/openshift/client-go/image/listers/image/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// outerInformerWrapper is a type to wrap an informer generated by "us" into a type
// that fits informers generated by "them".
type outerInformerWrapper struct {
	ours ourv1.ImageStreamInformer
}

func (i outerInformerWrapper) Lister() theirv1lister.ImageStreamLister {
	return informerWrapper{ours: i.ours.Lister()}
}

func (i outerInformerWrapper) Informer() cache.SharedIndexInformer {
	return i.ours.Informer()
}

type informerWrapper struct {
	ours ourv1lister.ImageStreamLister
}

func (i informerWrapper) ImageStreams(ns string) theirv1lister.ImageStreamNamespaceLister {
	return i.ours.ImageStreams(ns)
}

func (i informerWrapper) List(selector labels.Selector) ([]*v1.ImageStream, error) {
	return i.ours.List(selector)
}
